version: '3'

networks:
  broker_network:
    driver: bridge

services:
  mysql:
    image: mysql
    ports:
      - 3306:3306
    volumes:
      - /opt/mysql_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_PASSWORD=root
    networks:
      - broker_network
    restart: always

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - '2181:2181'
    networks:
      - broker_network
    depends_on:
      - mysql
    restart: always


  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_HOST_NAME: host.docker.internal
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: 'create-user:1:1, find-all-user:1:1, find-user:1:1, create-purchase:1:1, find-all-purchase:1:1, find-purchase:1:1'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_TOPIC_METADATA_REFRESH_INTERVAL_MS: "60000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - broker_network
    restart: always

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    command: node dist/main 
    environment:
      NODE_ENV: development
      LOGGER_LEVEL: silly
      PORT: 3000
    ports:
      - '3000:3000'
    networks:
      - broker_network
    depends_on:
      - kafka
    restart: always


  engine:
    build:
      context: ./engine
      dockerfile: Dockerfile
    container_name: engine
    command: node dist/main
    environment:
      NODE_ENV: development
      LOGGER_LEVEL: silly
      PORT: 3001
      DB_TYPE: mysql
      DB_HOST: localhost
      DB_PORT: 3306
      DB_USERNAME: root    
      DB_PASSWORD: root
      DB_NAME: test
      DB_SYNC: false
    ports:
        - "3001:3001"
    depends_on:
      - api-gateway
    networks:
      - broker_network
    restart: always